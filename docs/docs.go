// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/messages": {
            "get": {
                "description": "Get all messages with their current status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "List all messages",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sender_service_internal_application_handlers.ListMessagesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Send a new message to be processed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Send a new message",
                "parameters": [
                    {
                        "description": "Message to send",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sender_service_internal_application_handlers.SendMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sender_service_internal_application_handlers.SendMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/scheduler/start": {
            "post": {
                "description": "Start the message processing scheduler",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Start scheduler",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/scheduler/stop": {
            "post": {
                "description": "Stop the message processing scheduler",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Stop scheduler",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Get the health status of the service and its dependencies (MongoDB, RabbitMQ)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Get service health status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.HealthStatus"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "retry_count": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "sender_service_internal_application_handlers.ListMessagesResponse": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Message"
                    }
                }
            }
        },
        "sender_service_internal_application_handlers.SendMessageRequest": {
            "type": "object",
            "required": [
                "content",
                "to"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "example": "project1"
                },
                "to": {
                    "type": "string",
                    "example": "+90111111111"
                }
            }
        },
        "sender_service_internal_application_handlers.SendMessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Accepted"
                },
                "messageId": {
                    "type": "string",
                    "example": "67f2f8a8-ea58-4ed0-a6f9-ff217df4d849"
                }
            }
        },
        "service.HealthStatus": {
            "type": "object",
            "properties": {
                "mongodb": {
                    "type": "boolean"
                },
                "rabbitmq": {
                    "type": "boolean"
                },
                "redis": {
                    "type": "boolean"
                },
                "service": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Message Sender Service API",
	Description:      "This is the Message Sender Service API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
